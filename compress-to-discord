#!/usr/bin/python

import subprocess
import json
import sys
import os

class CompressToDiscord:

    def __init__(self, file):
        self.compressVideo(os.path.abspath(file), 10)

    def getTargetResolution(self, target_bitrate, framerate):
        bitrate_multiplyer =framerate/30
        bitrate = target_bitrate/bitrate_multiplyer
        if bitrate > 3000000:
            return "1920x1080"
        elif bitrate > 1000000:
            return "1280x720"
        elif bitrate > 500000:
            return "854x480"
        else:
            return "640x360"

    def getVideoInfo(self, file):
        meta_data_trimmed = {}
        command = [
            "ffprobe",
            "-v",
            "quiet",
            "-print_format",
            "json",
            "-show_format",
            "-show_streams",
            file
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        if result.stderr:
            print("Error:", result.stderr)
            exit()
        meta_data = json.loads(result.stdout)
        for steam in meta_data['streams']:
            try:
                meta_data_trimmed["duration"] = float(steam['duration'])
                meta_data_trimmed["bitrate"] = float(steam['bit_rate'])
                meta_data_trimmed["resolution"] = f"{steam['width']}x{steam['height']}"
                meta_data_trimmed["framerate"] = eval(steam['r_frame_rate'])
            except:
                meta_data_trimmed = {}
            if meta_data_trimmed != {}:
                break
        if meta_data_trimmed == {}:
            meta_data_trimmed["duration"] = float(meta_data['format']['duration'])
            meta_data_trimmed["bitrate"] = float(meta_data['format']['bit_rate'])
            meta_data_trimmed["resolution"] = "Unknown"
            meta_data_trimmed["framerate"] = 30
        meta_data_trimmed["filesize"] = float(meta_data['format']['size'])
        return meta_data_trimmed

    def compressVideo(self, file, size):
        meta_data = self.getVideoInfo(file)
        file_size = int(meta_data['filesize'] / 1048576)
        file_bitrate = meta_data['bitrate']
        file_resolution = meta_data['resolution']
        target_path = os.path.join(os.path.dirname(file), os.path.splitext(os.path.basename(file))[0] + ".discord.mp4")
        target_size = size * 8 * 1024 * 1024
        target_audio_bitrate = 64000
        target_bitrate = int((target_size/meta_data["duration"])*0.85) # 15% margin for margin of error
        target_resolution = self.getTargetResolution(target_bitrate, meta_data["framerate"])
        print(f"\nINFO: Input file {file_size}MB with {int(file_bitrate/1024)}kbps @ {file_resolution}")
        if not (target_bitrate >= meta_data["bitrate"]):
            if target_bitrate-target_audio_bitrate <= 0:
                print(f"WARN: File is too big to be compressed with sound.")
                command = [
                    "ffmpeg",
                    "-i", file,
                    "-c:v", "libx264",
                    "-b:v", str(target_bitrate),
                    '-s', target_resolution,
                    "-preset", "slow",
                    "-an",
                    target_path
                ]
            else:
                target_bitrate -= target_audio_bitrate
                command = [
                    "ffmpeg",
                    "-i", file,
                    "-c:v", "libx264",
                    "-b:v", str(target_bitrate),
                    '-s', target_resolution,
                    "-preset", "slow",
                    "-acodec", "aac", "-b:a", str(target_audio_bitrate),
                    target_path
                ]
            print(f"INFO: Targeting ~{int(size)}MB with {int(target_bitrate/1024)}kbps @ {target_resolution}\n")
            command = [
                "ffmpeg",
                "-i", file,
                "-c:v", "libx264",
                "-b:v", str(target_bitrate),
                '-s', target_resolution,
                "-preset", "slow",
                "-acodec", "aac", "-b:a", str(target_audio_bitrate),
                target_path
            ]
            subprocess.run(command)
        else:
            print(f"INFO: {file} is small enough. Skipping...")
        print(f"INFO: Wrote {target_path}")


if __name__ == '__main__':
    try:
        CompressToDiscord(sys.argv[1])
    except IndexError:
        print("Invalid syntax: CompressToDiscord [filename]")

